#TP1 Financial Econometrics 

import pandas as pd
import numpy as np

file_path = 'TP1.xls'

header_row = 2
df = pd.read_excel(file_path, header = header_row, skiprows = [0,4])
df = pd.DataFrame(df)
Stocks= df.set_index('Name',drop=True)

Stocks.head()

#Number 1.1 

Stocks['Sum_All_Stocks'] = Stocks.sum(axis=1)
Stocks['Return'] = Stocks['Sum_All_Stocks'][1:] /Stocks['Sum_All_Stocks'][:-1].values -1
log_return = (Stocks['Sum_All_Stocks'][1:] /Stocks['Sum_All_Stocks'][:-1].values)
Stocks['Log Return'] =np.log10(log_return)

Stocks.head()

#Number 1.2

return_sum = Stocks['Return'].sum()
print('The sum of all returns is', return_sum)

final_return = Stocks['Sum_All_Stocks'].iloc[-1] - Stocks['Sum_All_Stocks'].iloc[0] - 1

print('Arithmetic Return is', final_return)

print()

return_sum = Stocks['Log Return'].sum()
print('Logarithemic Return summed up is ', return_sum)

log_return = np.log10(Stocks['Sum_All_Stocks'].iloc[-1]) - np.log10(Stocks['Sum_All_Stocks'].iloc[0])
print('Logarithemic Return is', log_return)

#Here we can see that the arithmetic returns differ while the logarithemic return is the same

#Number 2 
import statsmodels.api as sm
from statsmodels.api import OLS

Stocks['Return_lag1'] = Stocks['Return'].shift(1)
Stocks['Return_lag2'] = Stocks['Return'].shift(2)

#Dropping row with NA for regression
Stocks.dropna(subset=['Return_lag2'], inplace = True)

y = Stocks['Return']
X = Stocks[['Return_lag1', 'Return_lag2']]
X = sm.add_constant(X)

lm = OLS(y, X)
results1 = lm.fit()

results1.params

#Here we see that the EMH doesn't hold because the coefficients are not 0 
#Meaning that that past returns influence returns today 

#Number 3
from scipy import stats
returns = Stocks['Return']

#Number 3.1 
mean, std_dev = stats.norm.fit(returns)
var = std_dev**2
print('Fitted Normal distribution:' )
print('The mean is is', mean)
print('The standard deviation is', std_dev)

#Number 3.2 
from scipy.stats import skew, kurtosis

mean_return = np.mean(returns)
variance_return = np.var(returns)

# Compute skewness and kurtosis
skewness_return = skew(returns)
kurtosis_return = kurtosis(returns)

# Print the computed statistics
print("Mean of Returns:", mean_return)
print("Variance of Returns:", variance_return)
print("Skewness of Returns:", skewness_return)
print("Kurtosis of Returns:", kurtosis_return)

#Number 3.3 
returns_data = Stocks[['MICROSOFT ', 'CREDIT SUISSE ASST.MAN. ', 'BOEING ', 'COCA COLA ','NIKE']]
covariance_matrix = np.cov(returns_data, rowvar=False)

print(covariance_matrix)

#Number 3.4 
a=np.random.normal(mean, std_dev, 10000)

skewness_random = skew(a)
kurtosis_random = kurtosis(a)


print("Skewness of Randomized Sample:", skewness_random)
print("Kurtosis of Randomized Sample:", kurtosis_random)

#Number 4
# Calculate the number of rows in each sub-DataFrame
num_rows_per_subframe = len(returns_data) // 5

# Split the DataFrame into 5 smaller DataFrames
subframes = np.array_split(returns_data, 5)

#Calculate
for i, subframe in enumerate(subframes):
    print(subframes[i])
    mean_return = np.mean(subframes[i])
    variance_return = np.var(subframes[i])

    # Compute skewness and kurtosis
    skewness_return = skew(subframes[i])
    kurtosis_return = kurtosis(subframes[i])

    # Print the computed statistics
    print("Mean of Returns:")
    print(mean_return)
    print("Variance of Returns:")
    print(variance_return)
    print("Skewness of Returns:", skewness_return)
    print("Kurtosis of Returns:", kurtosis_return)
    
    # Comment

#Number 5
def Moments(data):
    import numpy as np
    from scipy.stats import skew, kurtosis

    mean_return = np.mean(returns)
    variance_return = np.var(returns)

    # Compute skewness and kurtosis
    skewness_return = skew(returns)
    kurtosis_return = kurtosis(returns)

    # Print the computed statistics
    print("Mean of Returns:", mean_return)
    print("Variance of Returns:", variance_return)
    print("Skewness of Returns:", skewness_return)
    print("Kurtosis of Returns:", kurtosis_return)
    
Moments(subframes[1])
