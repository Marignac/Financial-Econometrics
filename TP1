#TP1 Financial Econometrics 

import pandas as pd
import numpy as np

file_path = 'TP1.xls'

header_row = 2
df = pd.read_excel(file_path, header = header_row, skiprows = [0,4])
df = pd.DataFrame(df)
Stocks= df.set_index('Name',drop=True)

Stocks.head()

#Number 1.1
#Calculte arithmetic and logarethimic returns add as columns 

Stocks['Sum_All_Stocks'] = Stocks.sum(axis=1)
Stocks['AR Return'] = Stocks['Sum_All_Stocks'][1:] /Stocks['Sum_All_Stocks'][:-1].values -1
log_return = (Stocks['Sum_All_Stocks'][1:] /Stocks['Sum_All_Stocks'][:-1].values)
Stocks['Log Return'] =np.log10(log_return)

Stocks.head()

#Number 1.2
return_sum = Stocks['Return'].sum()
print('Daily Return summed up is ', return_sum)

return_sum = Stocks['AR Return'].sum()
print('Arithmetic Return summed up is ', return_sum)

return_sum = Stocks['Log Return'].sum()
print('Logarithemic Return summed up is ', return_sum)

#Number 2

import statsmodels.api as sm
from statsmodels.api import OLS

Stocks['Return_lag1'] = Stocks['Return'].shift(1)
Stocks['Return_lag2'] = Stocks['Return'].shift(2)

#Dropping row with NA for regression
Stocks.dropna(subset=['Return_lag2'], inplace = True)

y = Stocks['Return']
X = Stocks[['Return_lag1', 'Return_lag2']]
X = sm.add_constant(X)

lm = OLS(y, X)
results1 = lm.fit()

results1.params

#Number 3.1
#Fit normal distribution with stas.norm.fit func

#Number 3.2 
#Compute moments 1-4 Mean, Variance, Sknewness, Kurtosis
#Save u and sigma2 to later use 

#Number 3.3
#Second moment COV matrix
#1 Matrix for 5 stocks

#Number 3.4
#Previously saved mu and sigman 
a=np.random.normal(mu, sigma, 10000)

#Compute 3rd and 4th moment 

#Comment on normal distribution compare to 3.3

#Number 4
#Split date into 5 and run (maybe make a function out of 3 to save time on 4) 

#Number 5
#Write function for 2nd, 3rd and 4th moment

def moments_function(db):
  

#func(stock) -> return 2nd moment 3rd monet 4th moment 
